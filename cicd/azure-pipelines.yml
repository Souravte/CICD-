
trigger:
- none

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  DOCKER_BUILD_CACHE_DIR: ${Pipeline.Workspace}/.buildx-cache
  BUILDER_NAME: $(Build.SourceBranchName)-$(Build.BuildId)
  testvar: testval

stages:
# - stage: Build
#   displayName: Build image
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: ubuntu-latest
#     steps:
#     - bash: |
#         curl -L https://github.com/roboll/helmfile/releases/download/v0.135.0/helmfile_linux_amd64 > helmfile
#         chmod +x helmfile
#       displayName: 'Install helm'
      
#     - bash: |
#         az login --service-principal -u "$(AZURE_SERVICE_PRINCIPAL_USER)" -p "$(AZURE_SERVICE_PRINCIPAL_PW_OR_CERT)" --tenant "$(AZURE_SERVICE_PRINCIPAL_TENANT)"
#         az aks get-credentials --resource-group "$(AZURE_RESOURCE_GROUP)" --name "$(CLUSTER_NAME)"
            
#         ./helmfile -environment=<my-environment> sync
#       displayName: 'helmfile  sync'

#     - task: Bash@3
#       continueOnError: true
#       displayName: "Linting Dockerfile"
#       inputs:
#         targetType: 'inline'
#         script: |
#           docker run --rm -i hadolint/hadolint < '$(Build.SourcesDirectory)/springboot-backend/Dockerfile'
          
#           # check if the Hadolint command found issues or not
#           if [ $? != 0 ];
#           then
#             echo "##vso[task.logissue type=error]Lint scanning found errors in the Dockerfile that need to be resolved!"
#             echo "##vso[task.complete result=Failed]Docker Lint reporting errors"
#           else
#             echo "##vso[task.complete result=Succeeded]Docker Lint succeeded"
#           fi

#     - task: Cache@2
#       inputs:
#         key: '"docker-build" | "$(Agent.OS)" | "Dockerfile" | "$(Build.SourceBranchName)"'
#         path: $(DOCKER_BUILD_CACHE_DIR)
#         restoreKeys: |
#           "docker-build" | "$(Agent.OS)" | "Dockerfile" | "$(Build.SourceBranchName)"
#           "docker-build" | "$(Agent.OS)" | "Dockerfile"

#     ## create builder
#     - task: Docker@2
#       displayName: Create Builder
#       inputs:
#         command: buildx
#         arguments: create --use --name $(BUILDER_NAME)

#     ## enable buildkit
#     - task: Docker@2
#       displayName: Enable Buildkit
#       inputs:
#         command: buildx
#         arguments: install
      
#     - task: Docker@2
#       displayName: Build an image
#       inputs:
#         containerRegistry: 'dockerhub_sc'
#         repository: 'bahrinipun/sb'
#         command: 'build'
#         Dockerfile: '$(Build.SourcesDirectory)/springboot-backend/Dockerfile'
#         buildContext: '$(Build.ArtifactStagingDirectory)'
#         tags: '1.60'
#         arguments: >-
#           --progress plain
#           --output type=docker,dest="$(Container.Image.Artifact.Path)"
#           --cache-from type=local,src=$(DOCKER_BUILD_CACHE_DIR)
#           --cache-to type=local,mode=max,dest=$(DOCKER_BUILD_CACHE_DIR)

#     ## remove builder
#     - task: Docker@2
#       displayName: Remove Builder
#       condition: succeededOrFailed()
#       inputs:
#         command: buildx
#         arguments: rm $(BUILDER_NAME)

#     - task: PublishPipelineArtifact@1
#       displayName: Publish Artifact
#       inputs:
#         path: "$(Container.Image.Artifact.Path)"
#         artifactName: ContainerImage

#     - task: ContainerStructureTest@0
#       inputs:
#         dockerRegistryServiceConnection: ''
#         repository: 'bahrinipun/sb'
#         tag: '1.60'
#         configFile: '$(Build.SourcesDirectory)/cicd/templates/structure-test-config.yaml'
#         testRunTitle: 'Structure Test'
#         failTaskOnFailedTests: false
    
#     - task: Bash@3
#       displayName: Download & Install Trivy For Image Scan
#       inputs:
#         targetType: 'inline'
#         script: |
#           docker images
#           wget https://github.com/aquasecurity/trivy/releases/download/v0.23.0/trivy_0.23.0_Linux-64bit.deb
#           sudo dpkg -i trivy_0.23.0_Linux-64bit.deb
#           trivy -v

#     - task: Bash@3
#       displayName: Trivy Scan
#       inputs:
#         targetType: 'inline'
#         script: |
#           trivy image --exit-code 0 --severity HIGH,CRITICAL bahrinipun/sb:1.60
#           trivy image --severity HIGH,CRITICAL --format template --template "@cicd/templates/junit.tpl" -o junit-report-high-crit.xml bahrinipun/sb:1.60

#     - task: PublishTestResults@2
#       displayName: 'Publish Trivy Scan Results'
#       inputs:
#         testResultsFormat: 'JUnit'
#         testResultsFiles: 'junit-report-high-crit.xml'
#         mergeTestResults: true
#         failTaskOnFailedTests: false
#         testRunTitle: 'Trivy - High & Critical Vulnerabilities'
#       condition: 'always()' 
          
#     - task: Docker@2
#       displayName: Push Image
#       inputs:
#         containerRegistry: 'dockerhub_sc'
#         repository: 'bahrinipun/sb'
#         command: 'push'
#         tags: '1.60'

- stage: ACR_Docker_SC_Create
  jobs:
  - job: SC_Create
    displayName: ACR Service Connection Create
    steps:
    - task: qetza.replacetokens.replacetokens-task.replacetokens@3
      displayName: 'Replace secrets'
      inputs:
        rootDirectory: '$(System.ArtifactsDirectory)'
        targetFiles: 'iac/terraform/pipelines/docker-sc-config.json'
        tokenPrefix: '@@'
        tokenSuffix: '@@'

    - task: AzureCLI@1
      displayName: 'Create ACR Service Connection'
      inputs:
        azureSubscription: sub_sc
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az extension add --name azure-devops
          az devops configure --defaults organization=https://dev.azure.com/bahrinipun/
          az devops configure --defaults project=demo-fullstack
          echo $AZURE_DEVOPS_EXT_PAT | az devops login --organization https://dev.azure.com/bahrinipun/
          az devops service-endpoint list --detect true -p demo-fullstack --org https://dev.azure.com/bahrinipun/ --query "[?type=='dockerregistry'].name" -o tsv
          docker_acr_sc_name=testaks9acr9_sc
          if az devops service-endpoint list --detect true -p demo-fullstack --org https://dev.azure.com/bahrinipun/ --query "[?type=='dockerregistry'].name" -o tsv then
              echo "Docker service connection $docker_acr_sc_name already exists"
          else
              ls -lrt $(System.ArtifactsDirectory)/iac/terraform/pipelines/config/
              az devops service-endpoint create --service-endpoint-configuration '$(System.ArtifactsDirectory)/iac/terraform/pipelines/config/docker-sc-config.json' --detect true
          fi
          az devops logout
      env:
        AZURE_DEVOPS_EXT_PAT: '$(AZURE_DEVOPS_EXT_PAT)'