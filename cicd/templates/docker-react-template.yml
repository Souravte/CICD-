# hadolint
# build
# image static scan & publish test results
# push
# container structure test

steps:
    - task: Bash@3
      displayName: "Linting Dockerfile"
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: |
          docker run --rm -i hadolint/hadolint < '${{ parameters.projectName }}/Dockerfile'
          
          # check if the Hadolint command found issues or not
          if [ $? != 0 ];
          then
            echo "##vso[task.logissue type=error]Lint scanning found errors in the Dockerfile that need to be resolved!"
            echo "##vso[task.complete result=Failed]Docker Lint reporting errors"
          else
            echo "##vso[task.complete result=Succeeded]Docker Lint succeeded"
          fi

    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        containerRegistry: '${{ parameters.dockerRegistry_sc }}'
        repository: '${{ parameters.projectName }}'
        command: 'build'
        Dockerfile: '${{ parameters.projectName }}/Dockerfile'
        buildContext: '${{ parameters.projectName }}'
        tags: '${{ parameters.appVersion }}'

    - task: ContainerStructureTest@0
      displayName: 'Container Structure Test'
      inputs:
        dockerRegistryServiceConnection: ''
        repository: '${{ parameters.projectName }}'
        tag: '${{ parameters.appVersion }}'
        configFile: 'cicd/templates/structure-test-config.yaml'
        testRunTitle: 'Structure Test'

    - task: Bash@3
      displayName: Install Trivy 0.23.0
      inputs:
        targetType: 'inline'
        script: |
          docker images
          wget https://github.com/aquasecurity/trivy/releases/download/v0.23.0/trivy_0.23.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.23.0_Linux-64bit.deb
          trivy -v

    - task: Bash@3
      displayName: Trivy Image Scan
      inputs:
        targetType: 'inline'
        script: |
          trivy image --exit-code 0 --severity HIGH,CRITICAL '${{ parameters.acrName }}'/'${{ parameters.projectName }}':'${{ parameters.appVersion }}'
          trivy image --severity HIGH,CRITICAL --format template --template "junit.tpl" -o junit-report-high-crit.xml '${{ parameters.acrName }}'/'${{ parameters.projectName }}':'${{ parameters.appVersion }}'

    - task: PublishTestResults@2
      displayName: 'Publish Trivy Scan Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'junit-report-high-crit.xml'
        mergeTestResults: true
        failTaskOnFailedTests: false
        testRunTitle: 'Trivy - High & Critical Vulnerabilities'
      condition: 'always()' 

    - task: Docker@2
      displayName: 'Push Docker Image to ACR'
      condition: ne(variables['Build.Reason'], 'PullRequest')
      inputs:
        containerRegistry: '${{ parameters.dockerRegistry_sc }}'
        repository: '${{ parameters.projectName }}'
        command: 'push'
        tags: '${{ parameters.appVersion }}'
    
    
