schemaVersion: 2.0.0

globalEnvVars:
  - key: "VIRTUAL_ENV"
    value: "/env"
  - key: "PATH"
    value: "/env/bin:$PATH"


metadataTest:
  # Image has expected default metadata
  env:
    - key: JAVA_HOME
      value: /usr/local/openjdk-11
  exposedPorts: ["8080"]
  labels:
    - key: 'com.abnamro.label-schema.maintainer'
      value: 'Nipun Bahri'
  # volumes: ["null"]
  # entrypoint: []
  # cmd: ["/bin/bash"]
  workdir: "/"

fileExistenceTests:
  # check that the apt-packages text file exists and has the correct permissions
  - name: 'JAR Existence'
    path: '/springboot-backend-1.0.jar'
    shouldExist: true

  # - name: 'Docker Entry Point Exists'
  #   path: '/docker-entrypoint.sh'
  #   shouldExist: true

# fileContentTests:
#  # check that the default apt repository is set correctly
#   - name: 'apt sources'
#     path: '/etc/apt/sources.list'
#     expectedContents: ['.*httpredir\.debian\.org/debian jessie main.*']

#  # check that the retry policy is correctly specified
#   - name: 'retry policy'
#     path: '/etc/apt/apt.conf.d/apt-retry'
#     expectedContents: ['Acquire::Retries 3;']

# commandTests:
#   # Main binary can print its version
#   - name: go version
#     command: go
#     args: ["version"]
#     expectedOutput: ["go version go1.14.6"]
#     exitCode: 0

#   # Can compile a valid "hello world"
#   - name: hello world
#     setup: [["wget", "https://raw.githubusercontent.com/go-training/helloworld/master/main.go"]]
#     command: go
#     args: ["run", "main.go"]
#     expectedOutput: ["Hello World!!"]
#     exitCode: 0
#     teardown: [["rm", "main.go"]]

#   # check that the python binary is in the correct location
#   - name: "python installation"
#     command: "which"
#     args: ["python"]
#     expectedOutput: ["/usr/bin/python\n"]

#  # setup a virtualenv, and verify the correct python binary is run
#   - name: "python in virtualenv"
#     setup: [["virtualenv", "/env"]]
#     command: "which"
#     args: ["python"]
#     expectedOutput: ["/env/bin/python\n"]

#  # setup a virtualenv, install gunicorn, and verify the installation
#   - name: "gunicorn flask"
#     setup: [["virtualenv", "/env"],
#             ["pip", "install", "gunicorn", "flask"]]
#     command: "which"
#     args: ["gunicorn"]
#     expectedOutput: ["/env/bin/gunicorn"]