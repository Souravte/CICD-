
trigger:
- master

resources:
- repo: self

pool:
  vmImage: ubuntu-latest

parameters:
  - name: projectName
    type: string
    default: react-frontend

variables:
  # helmVersion: 3.2.3
  # registryServerName: '$(registryName).azurecr.io'
  # projectName: ${{ parameters.projectName }}
  # imageName: ${{ parameters.projectName }}
  # imageTag: $(build.buildId)
  # helmChartVersion: $(build.buildId)
  # registryName: testaksacr9
  # registryLogin: testaksacr9.azurecr.io
  # registryPassword: 6lps+e22wxBZWjdIcsg3YQhKvoo+dLpj

   # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'd6e7b3b6-e634-4138-8e27-3ff952063801'
  imageRepository: 'testaksacr9'
  containerRegistry: 'testaksacr9.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'testaksacr91577d987-auth'


steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

# - bash: |
#     cd $(projectName)
#     docker build \
#         -t $(registryServerName)/$(imageName):$(imageTag) \
#         .
#   failOnStderr: true
#   displayName: 'docker build'
  
# - bash: |
#     echo '$(registryPassword)' | docker login \
#         $(registryServerName) \
#         -u $(registryLogin) \
#         --password-stdin
#   condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
#   displayName: 'docker login'
  
# - bash: |
#     docker push $(registryServerName)/$(imageName):$(imageTag)
#   failOnStderr: true
#   condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
#   displayName: 'docker push'
