trigger:
- none

pool:
  vmImage: ubuntu-latest

variables:
- template: variables/iac-variables.yml

stages:
- stage: Terraform_Validate
  jobs:
  - job: Validate
    displayName: Validation
    steps:
    - task: AzureCLI@2
      displayName: 'Get Latest Kubernetes Version'
      inputs:
        azureSubscription: $(service_connection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          version=$(az aks get-versions --location $(location) --query orchestrators[-1].orchestratorVersion --output tsv)
          echo "##vso[task.setvariable variable=kubernetesVersion;]$version"
          echo "kubernetesVersion: $version"
        #addSpnToEnvironment: true

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: Terraform installation
      inputs:
        terraformVersion: $(terraformVersion)

    - task: TerraformTaskV2@2
      displayName: Terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/iac/terraform'
        backendServiceArm: $(service_connection)
        backendAzureRmResourceGroupName: $(sac_rg)
        backendAzureRmStorageAccountName: $(sac)
        backendAzureRmContainerName: $(sac_container)
        backendAzureRmKey: $(tfstatePath)
        
    - task: TerraformTaskV2@2
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        
- stage: Terraform_Deploy
  jobs:
  - job: Deploy
    displayName: TF Deployment
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: Terraform installation
      inputs:
        terraformVersion: $(terraformVersion)
      
    - task: TerraformTaskV2@2
      displayName: Terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/iac/terraform'
        backendServiceArm: $(service_connection)
        backendAzureRmResourceGroupName: $(sac_rg)
        backendAzureRmStorageAccountName: $(sac)
        backendAzureRmContainerName: $(sac_container)
        backendAzureRmKey: $(tfstatePath)

    - task: TerraformTaskV2@2
      displayName: Terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/iac/terraform'
        commandOptions: '-out $(System.DefaultWorkingDirectory)/iac/terraform/out.plan'
        environmentServiceNameAzureRM: $(service_connection)

    - task: TerraformTaskV2@2
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/iac/terraform'
        commandOptions: '$(System.DefaultWorkingDirectory)/iac/terraform/out.plan'
        environmentServiceNameAzureRM: $(service_connection)

- stage: Helmfile_Deploy
  jobs:
  - job: Helmfile_Deployment
    displayName: Helmfile Deployment
    steps:
    - task: Bash@3
      displayName: 'Helmfile Install'
      inputs:
        targetType: 'inline'
        script: |
          curl -L https://github.com/roboll/helmfile/releases/download/v0.135.0/helmfile_linux_amd64 > helmfile
          chmod +x helmfile

    - task: Bash@3
      displayName: 'debug'
      inputs:
        targetType: 'inline'
        script: |
          ls -lrt

    - task: Bash@3
      displayName: 'Helmfile Sync'
      inputs:
        targetType: 'inline'
        script: |
          az aks get-credentials --resource-group "$(cluster_rg)" --name "$(cluster_name)"
          ./helmfile apply