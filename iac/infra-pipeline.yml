# Following are steps planned within this pipeline
#
# Create KeyVault

# Build Name
name: $(TeamProject)_$(BuildDefinitionName)_$(SourceBranch)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Lint
  displayName: Lint Bicep
  jobs:
  - job: LintCode
    displayName: Lint code
    steps:
      - task: AzureCLI@2
        name: LintCode
        displayName: Lint code
        inputs:
          azureSubscription: cgt-d-rg
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |            
            az bicep build --file ../iac/main.bicep

- stage: Validate
  displayName: Validate Bicep
  variables:
    - template: variables.yml  
  jobs:
  - job: ValidateBicepCode
    displayName: Validate Bicep code
    steps:
      - task: FileTransform@1
        displayName: 'File transformation: pattern.template.parameters.json'
        inputs:
          folderPath: '.'
          targetFiles: 'pattern.template.parameters.json'
          fileType: json

      - task: AzureCLI@2
        name: Preflight_Validation
        displayName: Preflight Validation
        inputs:
          azureSubscription: cgt-d-rg
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az deployment group validate \
              --resource-group cgt-d-rg \
              --template-file ../iac/main.bicep --parameters @pattern.template.parameters.json

- stage: Preview_Changes
  displayName: Preview Infra Changes
  variables:
    - template: variables.yml
  jobs: 
  - job: Preview_Azure_Changes
    displayName: Preview Azure changes
    steps:
      - task: FileTransform@1
        displayName: 'File transformation: pattern.template.parameters.json'
        inputs:
          folderPath: '.'
          targetFiles: 'pattern.template.parameters.json'
          fileType: json

      - task: AzureCLI@2
        name: RunWhatIf
        displayName: Run what-if
        inputs:
          azureSubscription: cgt-d-rg
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az deployment group what-if \
              --resource-group cgt-d-rg \
              --template-file ../iac/main.bicep --parameters @pattern.template.parameters.json

- stage: Deploy
  displayName: Deploy Infra
  variables:
    - template: variables.yml
  jobs:
  - deployment: DeployMyInfra
    displayName: Deploy MyInfra
    environment: RK-Environment
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: FileTransform@1
              displayName: 'File transformation: pattern.template.parameters.json'
              inputs:
                folderPath: '.'
                targetFiles: 'pattern.template.parameters.json'
                fileType: json
            - task: AzureCLI@2
              name: DeployBicepFile
              displayName: Deploy Bicep file
              inputs:
                azureSubscription: cgt-d-rg
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az deployment group create \
                    --name samplePatternDeployment \
                    --resource-group cgt-d-rg \
                    --template-file ../iac/main.bicep --parameters @pattern.template.parameters.json


# Following are steps planned within this pipeline-
#
# Get PAT from the CGT keyvault
# Add pipeline tags i.e image name, onboarding etc
# Get CGT Repository i.e. cgt-images (This part fetches and validates if repo exists within an org)
# Get master branch from CGT repo (This part fetches and validates if branch already exists)
# Assemble input and create branch from master (Generate the object to create a new Branch with a commit)
# Create WI in CGT board- GRD0001007/BLK0004889
# Create new pull request from the newly created branch towards master and attach Work item
# 

# Build Name
name: $(TeamProject)_$(BuildDefinitionName)_$(SourceBranch)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
- none

parameters:
- name: teamAppId
  type: string
- name: baseImageName
  type: string
- name: baseImageBranchName
  type: string
  default: test-branch
- name: baseImageVersion
  type: string
  default: 1.0
- name: baseImageRepoPath
  type: string
- name: sourceRegistry
  type: string
  default: p-nexus-3.development.nl.eu.abnamro.com:18445/

variables:
- template: /pipelines/variables/variables.yml

stages:
  - stage: Generate_Image_Template
    displayName: Generate Image Template
    jobs:
      - job: Generate_Template
        displayName: Generate Template
        steps:
          - checkout: self
            persistCredentials: true

          # - task: AzureCLI@2
          #   displayName: Retrieve PAT
          #   inputs:
          #     azureSubscription: $(azureServiceConnection)
          #     scriptType: 'bash'
          #     scriptLocation: 'inlineScript'
          #     inlineScript: |
          #       patvalue=$(az keyvault secret show --name $(pat_secret_name) --vault-name $(keyVaultName) --query "value")
          #       echo "##vso[task.setvariable variable=patvalue;issecret=true]$patvalue"

          - task: AzureCLI@2
            displayName: Add Build Tags
            name: add_build_tags
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "##vso[build.addbuildtag]teamAppId ${{ parameters.teamAppId }}"
                echo "##vso[build.addbuildtag]baseImageName ${{ parameters.baseImageName }}"
                echo "##vso[build.addbuildtag]baseImageVersion ${{ parameters.baseImageVersion }}"

          - task: AzureCLI@2
            displayName: ADO PR
            inputs:
              azureSubscription: 'mcpk-d-rg'
              scriptType: 'bash'
              scriptLocation: 'scriptPath'
              scriptPath: '.devops/scripts/create-workitem.sh'
              arguments: 'asa as'

          # - task: AzureCLI@2
          #   displayName: Create WorkItem
          #   name: create_workitem
          #   inputs:
          #     azureSubscription: $(azureServiceConnection)
          #     scriptType: bash
          #     scriptLocation: inlineScript
          #     inlineScript: |
          #       az devops configure --defaults organization=https://dev.azure.com/$(organization)/ project=$(project)
          #       echo  $(PAT_TOKEN) | az devops login --organization https://dev.azure.com/$(organization)/

          #       title="${{ parameters.baseImageName }} base image created through CGT Onboarding pipeline by ${{ parameters.teamAppId }} team"
          #       # Get Area path in the form GRD0001007\BLK0004889 to create the workitem 
          #       areapath=$(az boards area team list --team $(block_name) --query defaultValue -o tsv)
          #       echo $areapath

          #       # Get the current iteration path (sprint name) 
          #       iterationpath=$(az boards iteration team list --team $(block_name) --query "[?attributes.timeFrame=='current'].path" -o tsv)
          #       echo $iterationpath
                
          #       # Set pipelineusrl variable to use in description
          #       pipelineUrl="$(System.CollectionUri)/$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
          #       echo $pipelineUrl

          #       # Set work item description
          #       description="Work Item Created by Base Image Onboarding Pipeline $pipelineUrl"

          #       # Get a user from dev group to assign the work item to
          #       id=$(az boards work-item create --title "$title" --type Action --description "$description" --area "$areapath" --iteration "$iterationpath" --output json | jq -r '.id')
          #       echo "##vso[task.setvariable variable=workitem_id;isOutput=true]$id"

          - task: Bash@3
            displayName: Create Branch With Template
            name: create_branch
            condition: succeededOrFailed()
            inputs:
              targetType: filePath
              filePath: .devops/scripts/create-templatebranch.sh
            env:
              AZURE_DEVOPS_EXT_PAT: $(PAT_TOKEN)
              BASE_IMAGE_NAME: ${{ parameters.baseImageName }}
              BRANCH_NAME: ${{ parameters.baseImageBranchName }}
              SOURCE_REGISTRY: ${{ parameters.sourceRegistry }}

          # - task: AzureCLI@2
          #   displayName: Create Pull Request
          #   inputs:
          #     azureSubscription: $(azureServiceConnection)
          #     scriptType: 'bash'
          #     scriptLocation: 'scriptPath'
          #     scriptPath: .devops/scripts/create-pullrequest.sh
          #     arguments: '$(PAT_TOKEN) $(organization) $(project) $(repo_name) ${{ parameters.baseImageBranchName }}'

          - task: AzureCLI@2
            displayName: Create Pull Request
            name: create_pullrequest
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -euo pipefail

                : "${SYSTEM_DEBUG:=false}"
                if [ "$SYSTEM_DEBUG" == "true" ]; then
                  set -x
                fi

                az devops configure --defaults organization=https://dev.azure.com/$(organization)/ project=$(project)
                echo  $(PAT_TOKEN) | az devops login --organization https://dev.azure.com/$(organization)/
                az repos pr create --repository $(repo_name) --source-branch ${{ parameters.baseImageBranchName }} --work-items $(create_workitem.workitem_id) --title "PR raised for ${{ parameters.baseImageName }}:${{ parameters.baseImageVersion }} by ${{ parameters.teamAppId }}"
